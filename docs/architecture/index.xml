<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architectures on Hanami Guides</title>
    <link>https://tmtm.github.io/hanami-guides/architecture/</link>
    <description>Recent content in Architectures on Hanami Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2018</copyright>
    
	<atom:link href="https://tmtm.github.io/hanami-guides/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>インタラクター</title>
      <link>https://tmtm.github.io/hanami-guides/architecture/interactors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/architecture/interactors/</guid>
      <description>概要 Hanamiはあなたのコードを組織化するためのオプションのツールを提供します。
これらは インタラクター で、 サービスオブジェクト 、 ユースケース 、 オペレーション とも呼ばれます。
私たちはそれらが素晴らしくて複雑さを管理するのを助けると思いますが、あなたがそれらなしでHanamiのアプリを作るのは自由です。
このガイドでは、Hanamiのインタラクターが既存のアプリケーションに小さな機能を追加することによってどのように機能するかを説明します。
これから作業する既存のアプリケーションは、 入門ガイドのbookshelfアプリケーションです。
新機能: Eメール通知 私たちの新機能のストーリー: &amp;gt; 管理者として、書籍が追加されたときにEメール通知を受け取りたい
アプリケーションには認証がないため、だれでも新しい書籍を追加できます。 環境変数で管理者のメールアドレスを提供します。
これはインタラクターをいつ使うべきか、そして特にHanami::Interactorをどのように使うことができるかを示すほんの一例です。
この例は、新しい書籍本が投稿される前に管理者による承認を追加したり、 ユーザーが電子メールアドレスを入力してから特別なリンクを介してその書籍を編集することを許可するなど、 他の機能の基礎を提供します。
実際には、インタラクターを使用してWebから離れて抽象化された 任意のビジネスロジック を実装できます。 コードベースの複雑さを管理するために、一度に複数のことを行いたい場合に特に役立ちます。
これは重要なビジネスロジックを分離するために使用されています。 これは単一責任原則に従います。
Webアプリケーションでは、一般的にコントローラのアクションから呼び出されます。 これにより、懸念を分けることができます。 あなたのビジネスロジックオブジェクト、インタラクターは、ウェブについてまったく知りません。
コールバック？ それは必要ありません！ Eメール通知を実装する簡単な方法は、コールバックを追加することです。
つまり: データベースに新しいBookレコードが作成された後、Eメールが送信されます。
設計上、Hanamiはそのようなメカニズムを提供していません。 これは、永続化コールバックをアンチパターンと見なしているためです。 それは単一責任の原則に違反しています。 この場合、それは永続化とEメール通知を不適切に混ぜ合わせます。
テスト中(そしておそらく他でも)、あなたはそのコールバックをスキップしたくなるでしょう。 これはすぐに混乱します。同じイベントに対する複数のコールバックが特定の順序で発生するためです。 また、ある時点でいくつかのコールバックをスキップしたいと思うかもしれません。 それらはコードを理解しにくく、もろくします。
代わりに、暗黙的よりも明示的であることをお勧めします。
インタラクターは特定の ユースケース を表すオブジェクトです。
それは各クラスに一つの責任を持たせます。 インタラクターの唯一の責任は、特定の結果を達成するためにオブジェクトとメソッド呼び出しを組み合わせることです。
私たちはHanami::Interactorをモジュールとして提供しているので、 あなたは生の古いRubyオブジェクトから始め、 あなたがその機能のいくつかを必要とするときinclude Hanami::Interactorすることができます。
コンセプト インタラクターの背後にある中心的な考え方は、機能の分離した部品を新しいクラスに抽出することです。
2つのパブリックメソッドを書くだけです: #initializeと#call。
これは、オブジェクトは簡単に推論できることを意味します。 オブジェクトが作成された後に呼び出すことができるメソッドが1つだけだからです。
動作を単一のオブジェクトにカプセル化することで、テストが簡単になります。 暗黙のうちに表現されるだけで、複雑さを隠すのではなく、コードベースを理解しやすくします。
準備 Getting Startedのbookshelfアプリケーションがあり、 「追加した書籍のEメール通知」機能を追加したいとしましょう。</description>
    </item>
    
    <item>
      <title>概要</title>
      <link>https://tmtm.github.io/hanami-guides/architecture/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/architecture/overview/</guid>
      <description>Hanami は2つの原則に基づいています: クリーンアーキテクチャ と Monolith First。
クリーンアーキテクチャ このアーキテクチャの主な目的は、プロダクトのコアと配信メカニズムとの間で懸念を分離することです。 前者は私たちのプロダクトが実装するユースケースのセットで表現され、後者はこれらの機能を外の世界で利用できるようにするためのインターフェースです。
新しいプロジェクトを生成すると、2つの重要なディレクトリが見つかります: lib/とapps/。 それらは上記の主要部分のホームです。
アプリケーションコア どのように外部の世界に公開されるのかを心配することなく、一連の機能を実装します。 これが私たちのプロダクトの土台であり、私たちはそれに対する依存関係をどのように管理するかに注意を払いたいのです。
Hanami::Modelは、私たちのRubyオブジェクトを永続化するためのデフォルトの選択です。 これは_ソフトな依存関係_です。Gemfileから削除して他のものに置き換えることができます。
Hanami::Modelを使用するbookshelfという名前の新しく作られたプロジェクトに対してlib/ディレクトリがどのように表示されるかを見てみましょう。
$ tree lib lib ├── bookshelf │ ├── entities │ ├── mailers │ │ └── templates │ └── repositories └── bookshelf.rb 5 directories, 1 file そのアイデアは私たちのアプリケーションをRuby gemのように開発することです。
lib/bookshelf.rbファイルが私たちのアプリケーションの入り口になっています。このファイルが必要なときは、lib/下にあるすべてのコードを必要とし、初期化します。
2つの重要なディレクトリがあります:
 lib/bookshelf/entities lib/bookshelf/repositories  それらは私たちのモデルドメインの中核にあるRubyオブジェクトであるエンティティを含んでいます、そしてそれらはどんな永続化メカニズムも知りません。 この目的のために私たちは別の概念、リポジトリを持っています。それは私たちのエンティティと基礎となるデータベースの間の仲介者です。
Bookというエンティティごとに、BookRepositoryを持つことができます。
私たちはユースケースを実装するためにlib/bookshelf/interactorsのように望むだけ多くのディレクトリを追加することができます。
配送メカニズム HanamiはWebという名前のデフォルトアプリケーションを生成します。これはapps/web下にあります。 このアプリケーションは、エンティティ、リポジトリ、およびそこで定義されている他のすべてのオブジェクトを使用するため、製品のコアに依存します。
それは私たちの機能のために、Web配信メカニズムとして使用されています。
$ tree apps/web apps/web ├── application.rb ├── assets │ ├── favicon.</description>
    </item>
    
  </channel>
</rss>