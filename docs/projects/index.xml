<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Hanami Guides</title>
    <link>https://tmtm.github.io/hanami-guides/projects/</link>
    <description>Recent content in Projects on Hanami Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2018</copyright>
    
	<atom:link href="https://tmtm.github.io/hanami-guides/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP/2 Early Hints</title>
      <link>https://tmtm.github.io/hanami-guides/projects/http2-early-hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/http2-early-hints/</guid>
      <description>A web page may link to external resources such as stylesheets, or images (assets). With HTTP/1.1 the browser parses the HTML and for each link, it downloads the asset and eventually take an action on it: renders an image or evaluate JavaScript code. With HTTP/2 introduced an enhancement: the server can proactively &amp;ldquo;push&amp;rdquo; in parallel both the HTML payload and the some assets to the browser. This workflow is allowed due to the HTTP/2 TCP connections are multiplexed.</description>
    </item>
    
    <item>
      <title>Initializers</title>
      <link>https://tmtm.github.io/hanami-guides/projects/initializers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/initializers/</guid>
      <description>A project can optionally have one or more custom initializers.
Initializers are optional An initializer is a Ruby file used to setup third-party libraries or some other aspect of the code.
They are run as the last thing after the dependencies, the framework and the project code are loaded, but before the server or the console is started.
For instance, if we want to setup Bugsnag for our project we can do:</description>
    </item>
    
    <item>
      <title>Project Security</title>
      <link>https://tmtm.github.io/hanami-guides/projects/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/security/</guid>
      <description>Modern web development has many challenges, and of those security is both very important and often under-emphasized.
Hanami provides ways to secure from most common vulnerabilities. Security options can be configured in application.rb.
X-Frame-Options X-Frame-Options is a HTTP header supported by modern browsers. It determines if a web page can or cannot be included via &amp;lt;frame&amp;gt; and &amp;lt;iframe&amp;gt; tags by untrusted domains.
Web applications can send this header to prevent Clickjacking attacks:</description>
    </item>
    
    <item>
      <title>Rack Middleware</title>
      <link>https://tmtm.github.io/hanami-guides/projects/rack-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/rack-middleware/</guid>
      <description>Hanami exposes a project level Rack middleware stack to be configured like this:
# config/environment.rb Hanami.configure do middleware.use MyRackMiddleware end It&amp;rsquo;s worth noticing that this is equivalent to add a middleware in config.ru file. The only difference is that third-party plugins can hook into Hanami.configure to inject their own middleware.</description>
    </item>
    
    <item>
      <title>Rakeタスク</title>
      <link>https://tmtm.github.io/hanami-guides/projects/rake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/rake/</guid>
      <description>HanamiにはデフォルトのRakeタスクが同梱されています。これは開発者が独自のタスクを作成するための 前提条件 として使用できます。
$ bundle exec rake -T rake environment # Load the full project rake test # Run tests (for Minitest) rake spec # Run tests (for RSpec) 環境 プロジェクトコード(エンティティ、アクション、ビューなど)にアクセスする必要がある場合は、これをRakeタスクの前提条件として使用します。
例 プロジェクトコード(リポジトリなど)にアクセスできるRakeタスクを作成したいとします。
# Rakefile task clear_users: :environment do UserRepository.new.clear end$ bundle exec rake clear_users テスト/スペック これはテストスイートを実行するデフォルトのRakeタスクです。
以下のコマンドは同等です。
$ bundle exec rake$ bundle exec rake test :test (または--test=rspecスイッチでアプリケーションを生成した場合は:spec) Rakeタスクがデフォルトです。 Rubyサーバーホスティングエコシステムの互換性 Rubyサーバーホスティングエコシステムの多くのSoftware as a Service(SaaS)は、Ruby on Railsをモデルにしています。 たとえば、HerokuはRubyアプリケーションで次のRakeタスクを見つけることを期待しています:
 db:migrate assets:precompile  Herokuにはデプロイをカスタマイズする方法がないので、Ruby on Railsのこれらの「標準的な」Rakeタスクをサポートしています。</description>
    </item>
    
    <item>
      <title>Selectively boot apps</title>
      <link>https://tmtm.github.io/hanami-guides/projects/selectively-boot-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/selectively-boot-apps/</guid>
      <description>With Hanami you can build your project by following the Monolith-First principle. As you add more code to the project, you can grow it organically, by splitting the project into several Hanami apps.
A real world Hanami project could have dozens of Hanami apps in the same project (for example, web for the front-end, admin for the administration, api for a JSON API, etc&amp;hellip;) You might want to deploy them to different servers, even though they&amp;rsquo;re all a part of the same project.</description>
    </item>
    
    <item>
      <title>コードのリロード</title>
      <link>https://tmtm.github.io/hanami-guides/projects/code-reloading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/code-reloading/</guid>
      <description>コードのリロード により、コードを編集してブラウザを更新して変更を確認できます。サーバーを停止と再起動は必要ありません。
開発環境 これは開発専用の機能です。 Hanamiはshotgun Ruby gemを使って必要に応じてコードをリロードします。 新しく生成されたプロジェクトは、 Gemfileにこのエントリを登録します:
group :development do # Code reloading # See: http://hanamirb.org/guides/1.2/projects/code-reloading gem &amp;#39;shotgun&amp;#39; end 残念ながら、shotgunは現在の環境がfork(2)をサポートすることを要求します。 JRubyとWindowsはそれをサポートしていません。 このような場合、shotgunは開発環境と互換性がないので、そのエントリをGemfileから削除するか、--no-code-reloading引数を使用してサーバーを起動します。
その他の環境 Hanami コードのリロード をそのコアに実装していません。
フレームワークはこの機能については知りません。コードをロードして実行するためにRubyを使用するだけです。shotgun がHanamiプロジェクトのコードをラップすることで、 コードのリロード を可能にすします。
shotgunは開発時にのみ有効になるため、他のすべての環境ではこの コードのリロード 機能はありません。 この機能をフレームワークのコアから除外することで、Hanamiプロジェクトが本番環境でRubyのコード読み込みメカニズムを台無しにしないようにします。
つまり、いったんコードが本番環境にロードされると、それはもう変更されません。</description>
    </item>
    
    <item>
      <title>ロギング</title>
      <link>https://tmtm.github.io/hanami-guides/projects/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/logging/</guid>
      <description>各プロジェクトはHanami.loggerで利用可能なグローバルロガーを持っています。これは次のように使用できます: Hanami.logger.debug &amp;quot;Hello&amp;quot;
それはconfig/environment.rbで設定することが出来ます。
# config/environment.rb # ... Hanami.configure do # ... environment :development do logger level: :info end environment :production do logger level: :info, formatter: :json # ... end end ほとんどのホスティングSaaS企業が推奨するベストプラクティスであるため、デフォルトでは標準出力が使用されます。
ファイルを使いたい場合は、stream: &#39;path/to/file.log&#39;をオプションとして渡します。
機密情報のフィルタ Hanamiは自動的に非GET HTTPリクエストの本体をログに記録します。
ユーザーがフォームを送信すると、すべてのフィールドとその値がログに現れます:
[bookshelf] [INFO] [2017-08-11 18:17:54 +0200] HTTP/1.1 POST 302 ::1 /signup 5 {&amp;#34;signup&amp;#34;=&amp;gt;{&amp;#34;username&amp;#34;=&amp;gt;&amp;#34;jodosha&amp;#34;, &amp;#34;password&amp;#34;=&amp;gt;&amp;#34;secret&amp;#34;, &amp;#34;password_confirmation&amp;#34;=&amp;gt;&amp;#34;secret&amp;#34;, &amp;#34;bio&amp;#34;=&amp;gt;&amp;#34;lorem&amp;#34;}} 0.00593 機密情報がログに記録されるのを防ぐために、それらをフィルタリングすることができます:
# config/environment.rb # ... Hanami.configure do # ... environment :development do logger level: :debug, filter: %w[password password_confirmation] end end 出力は次のようになります:</description>
    </item>
    
  </channel>
</rss>