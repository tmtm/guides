<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Hanami Guides</title>
    <link>https://tmtm.github.io/hanami-guides/projects/</link>
    <description>Recent content in Projects on Hanami Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2018</copyright>
    
	<atom:link href="https://tmtm.github.io/hanami-guides/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HTTP/2 Early Hints</title>
      <link>https://tmtm.github.io/hanami-guides/projects/http2-early-hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/http2-early-hints/</guid>
      <description>Webページは、スタイルシートや画像(アセット)などの外部リソースにリンクすることがあります。 HTTP/1.1では、ブラウザはHTMLを解析し、リンクごとにアセットをダウンロードし、最終的にそれに対してアクションを実行します: 画像のレンダリングまたはJavaScriptコードの評価。 HTTP/2では機能強化が導入されました: サーバーはHTMLペイロードと一部のアセットの両方を並行して事前にブラウザーに「プッシュ」することができます。このワークフローは、HTTP/2 TCP接続が多重化されているため許可されています。それは多くのコミュニケーションが同時に起こることができることを意味します。
残念ながらHTTP/2の採用はまだ遅いので、IETFはHTTPステータス103 Early Hintsを導入することで、このワークフローをHTTP/1.1にも「バックポート」しました。 この場合、サーバーは単一の要求に対して1つ以上のHTTP応答を送信します。最後のものは、ページのHTMLを返す伝統的な200 OKでなければなりませんが、最初のnは、ブラウザにアセットを事前に取得するように指示する特別なヘッダLinkを含めることができます。
セットアップ まず最初に、Early-Hintsを有効にしたPuma 3.11.0+ が必要です:
# Gemfile gem &amp;#34;puma&amp;#34;# config/puma.rb early_hints true その後、プロジェクト構成から、この機能を簡単に有効にすることができます:
# config/environment.rb Hanami.configure do # ... early_hints true end 最後のステップとして、HTTP/2とh2oのようなEarly HintsをサポートするWebサーバーが必要です。 サーバーを起動してページにアクセスすると、JavaScriptとスタイルシートがプッシュされます(アセットヘルパーセクションを参照)。
他のWebサーバー 現在では、PumaだけがEarly Hintsをサポートしています。
アセットヘルパー あなたの資産を自動的にプッシュするために、あなたは私たちのアセットヘルパーを使わなければなりません。 しかし、ブラウザの制限(最大100アセットまでしかプッシュできません)により、デフォルトではHanamiはスタイルシートとJavaScriptのみを送信します。
  Helper Early Hints asset type Pushed by default     javascript :script yes   stylesheet :style yes   favicon :image no   image :image no   video :video no   audio :audio no   asset_path N/A no   asset_url N/A no    次の種類をオプトインまたはオプトアウトできます:</description>
    </item>
    
    <item>
      <title>Rackミドルウェア</title>
      <link>https://tmtm.github.io/hanami-guides/projects/rack-middleware/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/rack-middleware/</guid>
      <description>HanamiはプロジェクトレベルのRackミドルウェアスタックを次のように設定します:
# config/environment.rb Hanami.configure do middleware.use MyRackMiddleware end これはconfig.ruファイルにミドルウェアを追加するのと同じことは注目に値します。 唯一の違いは、サードパーティのプラグインがHanami.configureにフックして独自のミドルウェアを注入できることです。</description>
    </item>
    
    <item>
      <title>Rakeタスク</title>
      <link>https://tmtm.github.io/hanami-guides/projects/rake/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/rake/</guid>
      <description>HanamiにはデフォルトのRakeタスクが同梱されています。これは開発者が独自のタスクを作成するための 前提条件 として使用できます。
$ bundle exec rake -T rake environment # Load the full project rake test # Run tests (for Minitest) rake spec # Run tests (for RSpec) 環境 プロジェクトコード(エンティティ、アクション、ビューなど)にアクセスする必要がある場合は、これをRakeタスクの前提条件として使用します。
例 プロジェクトコード(リポジトリなど)にアクセスできるRakeタスクを作成したいとします。
# Rakefile task clear_users: :environment do UserRepository.new.clear end$ bundle exec rake clear_users テスト/スペック これはテストスイートを実行するデフォルトのRakeタスクです。
以下のコマンドは同等です。
$ bundle exec rake$ bundle exec rake test :test (または--test=rspecスイッチでアプリケーションを生成した場合は:spec) Rakeタスクがデフォルトです。 Rubyサーバーホスティングエコシステムの互換性 Rubyサーバーホスティングエコシステムの多くのSoftware as a Service(SaaS)は、Ruby on Railsをモデルにしています。 たとえば、HerokuはRubyアプリケーションで次のRakeタスクを見つけることを期待しています:
 db:migrate assets:precompile  Herokuにはデプロイをカスタマイズする方法がないので、Ruby on Railsのこれらの「標準的な」Rakeタスクをサポートしています。</description>
    </item>
    
    <item>
      <title>アプリを選択的に起動する</title>
      <link>https://tmtm.github.io/hanami-guides/projects/selectively-boot-apps/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/selectively-boot-apps/</guid>
      <description>Hanamiでは、Monolith-First原則に従ってプロジェクトを構築できます。 プロジェクトにコードを追加するにつれて、プロジェクトを複数のHanamiアプリに分割することで、それを有機的拡張できます。
実際のHanamiプロジェクトでは、同じプロジェクト内に多数のHanamiアプリ(たとえば、フロントエンド用のweb、管理用のadmin、JSON API用のAPIなど)を持つことができます。 それらはすべて同じプロジェクトの一部ですが、異なるサーバーにデプロイしたいかもしれません。 たとえば、ほとんどのサーバーはwebアプリ(サイトの顧客用)に、いくつかはapi(おそらくモバイルアプリを使用する顧客用)に使用し、そして、単一のサーバーでadminアプリを実行することもできます。これは他の2つよりもトラフィックが少なくなる可能性があるためです。
選択的起動 でこれをサポートします:
# config/environment.rb # ... Hanami.configure do if Hanami.app?(:web) require_relative &amp;#39;../apps/web/application&amp;#39; mount Web::Application, at: &amp;#39;/&amp;#39; end if Hanami.app?(:api) require_relative &amp;#39;../apps/api/application&amp;#39; mount Api::Application, at: &amp;#39;/api&amp;#39; end if Hanami.app?(:admin) require_relative &amp;#39;../apps/admin/application&amp;#39; mount Admin::Application, at: &amp;#39;/admin&amp;#39; end end HANAMI_APPS環境変数を使用して、使用するアプリを宣言できます。 単一のアプリ、または複数のアプリ(コンマで結合)を指定できます:
$ HANAMI_APPS=web,api bundle exec hanami server This would start only the web and api applications.</description>
    </item>
    
    <item>
      <title>イニシャライザ</title>
      <link>https://tmtm.github.io/hanami-guides/projects/initializers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/initializers/</guid>
      <description>プロジェクトはオプションで 1つ以上のカスタムイニシャライザを持つことができます。
イニシャライザはオプションです イニシャライザは、サードパーティのライブラリやその他のコードの側面を設定するために使用されるRubyファイルです。
これらは、依存関係、フレームワーク、プロジェクトコードがロードされた後 、サーバーまたはコンソールが起動される前に 最後に実行されます。
たとえば、Bugsnagを自分のプロジェクト用に設定したい場合は、次のようにします:
# config/initializers/bugsnag.rb require &amp;#39;bugsnag&amp;#39; Bugsnag.configure do |config| config.api_key = ENV[&amp;#39;BUGSNAG_API_KEY&amp;#39;] end プロジェクトイニシャライザはconfig/initializers下に追加されなければなりません。 イニシャライザはアルファベット順に実行されます。 </description>
    </item>
    
    <item>
      <title>コードのリロード</title>
      <link>https://tmtm.github.io/hanami-guides/projects/code-reloading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/code-reloading/</guid>
      <description>コードのリロード により、コードを編集してブラウザを更新して変更を確認できます。サーバーを停止と再起動は必要ありません。
開発環境 これは開発専用の機能です。 Hanamiはshotgun Ruby gemを使って必要に応じてコードをリロードします。 新しく生成されたプロジェクトは、 Gemfileにこのエントリを登録します:
group :development do # Code reloading # See: http://hanamirb.org/guides/1.2/projects/code-reloading gem &amp;#39;shotgun&amp;#39; end 残念ながら、shotgunは現在の環境がfork(2)をサポートすることを要求します。 JRubyとWindowsはそれをサポートしていません。 このような場合、shotgunは開発環境と互換性がないので、そのエントリをGemfileから削除するか、--no-code-reloading引数を使用してサーバーを起動します。
その他の環境 Hanami コードのリロード をそのコアに実装していません。
フレームワークはこの機能については知りません。コードをロードして実行するためにRubyを使用するだけです。shotgun がHanamiプロジェクトのコードをラップすることで、 コードのリロード を可能にすします。
shotgunは開発時にのみ有効になるため、他のすべての環境ではこの コードのリロード 機能はありません。 この機能をフレームワークのコアから除外することで、Hanamiプロジェクトが本番環境でRubyのコード読み込みメカニズムを台無しにしないようにします。
つまり、いったんコードが本番環境にロードされると、それはもう変更されません。</description>
    </item>
    
    <item>
      <title>プロジェクトセキュリティ</title>
      <link>https://tmtm.github.io/hanami-guides/projects/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/security/</guid>
      <description>現代のWeb開発は多くの課題を抱えており、それらのセキュリティは非常に重要であり、またしばしば強調されすぎていません。
Hanamiは脆弱性から保護する最も一般的な方法を提供します。セキュリティオプションはapplication.rbで設定できます。
X-Frame-Options X-Frame-Optionsは最近のブラウザでサポートされているHTTPヘッダです。信頼できないドメインによって&amp;lt;frame&amp;gt;および&amp;lt;iframe&amp;gt;タグを介してWebページを含めることができるかどうかを決定します。
Clickjacking攻撃を防ぐために、Webアプリケーションはこのヘッダーを送信できます:
# Denies all untrusted domains (default) security.x_frame_options &amp;#39;DENY&amp;#39;# Allows iframes on example.com security.x_frame_options &amp;#39;ALLOW-FROM https://example.com/&amp;#39; X-Content-Type-Options X-Content-Type-OptionsはブラウザがHTTPヘッダのContent-Typeによって宣言されたもの以外のものとしてファイルを解釈するのを防ぎます。
# Will prevent the browser from MIME-sniffing a response away from the declared content-type (default) security.x_content_type_options &amp;#39;nosniff&amp;#39; X-XSS-Protection X-XSS-Protectionは、XSS攻撃が検出された場合のブラウザの動作を決定するためのHTTPヘッダーです。
# Filter enabled. Rather than sanitize the page, when a XSS attack is detected, # the browser will prevent rendering of the page (default) security.x_xss_protection &amp;#39;1; mode=block&amp;#39;# Filter disabled security.</description>
    </item>
    
    <item>
      <title>ロギング</title>
      <link>https://tmtm.github.io/hanami-guides/projects/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/projects/logging/</guid>
      <description>各プロジェクトはHanami.loggerで利用可能なグローバルロガーを持っています。これは次のように使用できます: Hanami.logger.debug &amp;quot;Hello&amp;quot;
それはconfig/environment.rbで設定することが出来ます。
# config/environment.rb # ... Hanami.configure do # ... environment :development do logger level: :info end environment :production do logger level: :info, formatter: :json # ... end end ほとんどのホスティングSaaS企業が推奨するベストプラクティスであるため、デフォルトでは標準出力が使用されます。
ファイルを使いたい場合は、stream: &#39;path/to/file.log&#39;をオプションとして渡します。
機密情報のフィルタ Hanamiは自動的に非GET HTTPリクエストの本体をログに記録します。
ユーザーがフォームを送信すると、すべてのフィールドとその値がログに現れます:
[bookshelf] [INFO] [2017-08-11 18:17:54 +0200] HTTP/1.1 POST 302 ::1 /signup 5 {&amp;#34;signup&amp;#34;=&amp;gt;{&amp;#34;username&amp;#34;=&amp;gt;&amp;#34;jodosha&amp;#34;, &amp;#34;password&amp;#34;=&amp;gt;&amp;#34;secret&amp;#34;, &amp;#34;password_confirmation&amp;#34;=&amp;gt;&amp;#34;secret&amp;#34;, &amp;#34;bio&amp;#34;=&amp;gt;&amp;#34;lorem&amp;#34;}} 0.00593 機密情報がログに記録されるのを防ぐために、それらをフィルタリングすることができます:
# config/environment.rb # ... Hanami.configure do # ... environment :development do logger level: :debug, filter: %w[password password_confirmation] end end 出力は次のようになります:</description>
    </item>
    
  </channel>
</rss>