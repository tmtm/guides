<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Entities on Hanami Guides</title>
    <link>https://tmtm.github.io/hanami-guides/entities/</link>
    <description>Recent content in Entities on Hanami Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2018</copyright>
    
	<atom:link href="https://tmtm.github.io/hanami-guides/entities/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Schema</title>
      <link>https://tmtm.github.io/hanami-guides/entities/custom-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/entities/custom-schema/</guid>
      <description>We can take data integrity a step further: we can optionally define our own entity internal schema.
Custom schema is optional for SQL databases, while it&#39;s mandatory for entities without a database table, or while using with a non-SQL database. Custom schema takes precedence over automatic schema. If we use custom schema, we need to manually add all the new columns from the corresponding SQL database table. Default mode # lib/bookshelf/entities/user.</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>https://tmtm.github.io/hanami-guides/entities/data-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/entities/data-types/</guid>
      <description>Data types are available for custom entities schema, which are completely optional.
We have 5 data types:
 Definition - base type definition Strict - strict type with primitive type check Coercible - type with constructor that applies a coercion to given input Form - type with constructor that applies a non-strict coercion, specific to HTTP params JSON - type with constructor that applies a non-strict coercion, specific to JSON  Definition  Types::Nil Types::String Types::Symbol Types::Int Types::Float Types::Decimal Types::Class Types::Bool Types::True Types::False Types::Date Types::DateTime Types::Time Types::Array Types::Hash  Strict  Types::Strict::Nil Types::Strict::String Types::Strict::Symbol Types::Strict::Int Types::Strict::Float Types::Strict::Decimal Types::Strict::Class Types::Strict::Bool Types::Strict::True Types::Strict::False Types::Strict::Date Types::Strict::DateTime Types::Strict::Time Types::Strict::Array Types::Strict::Hash  Coercible  Types::Coercible::String Types::Coercible::Int Types::Coercible::Float Types::Coercible::Decimal Types::Coercible::Array Types::Coercible::Hash  Form  Types::Form::Nil Types::Form::Int Types::Form::Float Types::Form::Decimal Types::Form::Bool Types::Form::True Types::Form::False Types::Form::Date Types::Form::DateTime Types::Form::Time Types::Form::Array Types::Form::Hash  JSON  Types::Json::Nil Types::Json::Decimal Types::Json::Date Types::Json::DateTime Types::Json::Time Types::Json::Array Types::Json::Hash  Hanami model data types are based on dry-types gem.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://tmtm.github.io/hanami-guides/entities/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/entities/overview/</guid>
      <description>An entity is domain object that is defined by its identity.
See &amp;ldquo;Domain Driven Design&amp;rdquo; by Eric Evans.
An entity is at the core of an application, where the part of the domain logic is implemented. It&amp;rsquo;s a small, cohesive object that expresses coherent and meaningful behaviors.
It deals with one and only one responsibility that is pertinent to the domain of the application, without caring about details such as persistence or validations.</description>
    </item>
    
  </channel>
</rss>