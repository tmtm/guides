<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Views on Hanami Guides</title>
    <link>https://tmtm.github.io/hanami-guides/views/</link>
    <description>Recent content in Views on Hanami Guides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <copyright>All rights reserved - 2018</copyright>
    
	<atom:link href="https://tmtm.github.io/hanami-guides/views/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Basic Usage</title>
      <link>https://tmtm.github.io/hanami-guides/views/basic-usage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/basic-usage/</guid>
      <description>In the previous section we generated a view. Let&amp;rsquo;s use it.
Default Rendering First, we edit the corresponding template:
# apps/web/templates/dashboard/index.html.erb &amp;lt;h1&amp;gt;Dashboard&amp;lt;/h1&amp;gt; By visiting /dashboard, we should see &amp;lt;h1&amp;gt;Dashboard&amp;lt;/h1&amp;gt; in our browser.
Again we should look at the naming convention. Our view is Web::Views::Dashboard::Index, while the file name of the template is web/templates/dashboard/index.
For a given view Web::Views::Dashboard::Index, the corresponding template MUST be available at apps/web/templates/dashboard/index.html.erb. Context While rendering a template, variable lookups requested by the template go to a view context.</description>
    </item>
    
    <item>
      <title>Custom Error Pages</title>
      <link>https://tmtm.github.io/hanami-guides/views/custom-error-pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/custom-error-pages/</guid>
      <description>When an unsuccessful request is returned, there are some special pages that a Hanami application presents to users. These pages have a generic graphic and some basic information like the HTTP status code and the message.
Hanami allows us to customize them on a per-application basis. We just need to create a template with the corresponding HTTP code as the filename (e.g. apps/web/templates/500.html.erb). From then on, all 500 errors (Internal Server Error) will be presented using that template (like for an exception that is not rescued).</description>
    </item>
    
    <item>
      <title>Layouts</title>
      <link>https://tmtm.github.io/hanami-guides/views/layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/layouts/</guid>
      <description>Layouts are special views, that render the &amp;ldquo;fixed&amp;rdquo; part of the HTML markup. This is the part that doesn&amp;rsquo;t change from page to page (perhaps navigation, sidebar, header, footer, etc.)
When we generate a new application, there is a default layout called Web::Views::ApplicationLayout with a apps/web/templates/application.html.erb template. It comes with a very basic HTML5 wireframe.
&amp;lt;!DOCTYPE HTML&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;title&amp;gt;Web&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;%= yield %&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; The most interesting part is &amp;lt;%= yield %&amp;gt;.</description>
    </item>
    
    <item>
      <title>MIME Types</title>
      <link>https://tmtm.github.io/hanami-guides/views/mime-types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/mime-types/</guid>
      <description>A view can handle several MIME Types. Before diving into this subject, please consider to read how actions handle MIME Types.
It&amp;rsquo;s important to highlight the correlation between the format and template name. For a given MIME Type, Rack (and then Hanami) associate a format for it. XML is mapped from application/xml to :xml, HTML is text/html and becomes :html for us.
Format MUST be the first extension of the template file name.</description>
    </item>
    
    <item>
      <title>Overview</title>
      <link>https://tmtm.github.io/hanami-guides/views/overview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/overview/</guid>
      <description>A view is an object that&amp;rsquo;s responsible for rendering a template.
In a full stack Hanami application, an incoming HTTP request goes through the router, it instantiates and calls an action, which sets the status code and the headers for the response. The last bit is the body, which is set by the corresponding view&amp;rsquo;s output.
A Simple View Hanami ships a generator for actions that creates a view and a template.</description>
    </item>
    
    <item>
      <title>Share Code</title>
      <link>https://tmtm.github.io/hanami-guides/views/share-code/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/share-code/</guid>
      <description>Prepare In our settings (apps/web/application.rb), there is a code block that allows to share the code for all the views of our application. When a view includes the Web::View module, that block code is yielded within the context of that class. This is heavily inspired by Ruby Module and its included hook.
Imagine we have an application that only renders JSON. For each view we should specify the handled format.</description>
    </item>
    
    <item>
      <title>Templates</title>
      <link>https://tmtm.github.io/hanami-guides/views/templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/templates/</guid>
      <description>A template is a file that describes the body of a response. It is rendered by bounding the context of a view and using a template engine.
Naming For simplicity sake, there is a correlation between the view class name and the template file name. It&amp;rsquo;s the translation of the name into a path: from Dashboard::Index to dashboard/index.
The remaining part is made of multiple file extensions. The first is relative to the format and the latter is for the template engine.</description>
    </item>
    
    <item>
      <title>Testing</title>
      <link>https://tmtm.github.io/hanami-guides/views/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://tmtm.github.io/hanami-guides/views/testing/</guid>
      <description>One of the advantages of views as objects is that we can unit test them. We can both understand if a specific presentational logic behaves correctly and/or assert the contents of the rendered markup.
For the following example we&amp;rsquo;re gonna use RSpec for the concise syntax for test doubles.
# spec/web/views/books/show_spec.rb require_relative &amp;#39;../../../../apps/web/views/books/show&amp;#39; RSpec.describe Web::Views::Books::Show do let(:exposures) { Hash[book: double(&amp;#39;book&amp;#39;, price: 1.00), current_user: user, params: {}] } let(:template) { Hanami::View::Template.new(&amp;#39;apps/web/templates/books/show.html.erb&amp;#39;) } let(:view) { Web::Views::Home::Another.</description>
    </item>
    
  </channel>
</rss>